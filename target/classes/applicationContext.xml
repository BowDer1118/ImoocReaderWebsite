<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/task
            http://www.springframework.org/schema/task/spring-task.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--3.開啟Spring框架的註解開發模式-->
    <!--開啟Spring註解開發模式(ex:@Controller,@Repository,@Service...)-->
    <context:component-scan base-package="com.imooc"></context:component-scan>
    <!--開啟SpringMVC註解開發模式(@RequestMapping,@GetMapping...)-->
    <mvc:annotation-driven>
        <!--解決Response中文亂碼問題-->
        <!--使用訊息轉換器-->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <!--在supportedMediaTypes的list容器中加入元素-->
                <property name="supportedMediaTypes">
                    <!--加入指定Response類型和處理方式-->
                    <list>
                        <!--設定Response的結果type為html用utf-8編碼傳送-->
                        <value>text/html;charset=utf-8</value>
                        <!--6.處理JSON格式的字串中文亂碼問題-->
                        <value>application/json;charset=utf-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!--將靜態資源(ex:圖片,CSS...)忽略不處理，提高SpringMVC對URL的處理效率-->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>

    <!--5.配置FreeMaker模板引擎-->
    <!--使用FreeMarkerConfigurer類，通知Spring要到特定的位置加載Freemarker的配置-->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <!--設定模板引擎的腳本位置-->
        <property name="templateLoaderPath" value="/WEB-INF/ftl"></property>
        <!--設定FreeMarker本身需要配置的參數-->
        <property name="freemarkerSettings">
            <props>
                <!--設定模板引擎在讀取flt文件時的編碼格式(處理中文問題)-->
                <prop key="defaultEncoding">UTF-8</prop>
            </props>
        </property>
    </bean>
    <!--設定beanId為ViewResover(固定不可改的)讓Spring知道，要使用哪個模板引擎對資料進行解析-->
    <bean id="ViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <!--指定當ViewResover解析View與資料後，產生新的html的編碼格式-->
        <property name="contentType" value="text/html;charset=utf-8"></property>
        <!--指定要加載模板引擎的副檔名名稱-->
        <property name="suffix" value=".ftl"></property>
    </bean>

    <!--MyBatis與Spring的整合配置-->
    <!--2.配置連接池與資料庫數據來源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!--使用mySQL的驅動-->
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
        <!--資料庫連線位置與運行時參數-->
        <property name="url" value="jdbc:mysql://localhost:3306/imooc_reader?characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8&amp;allowPublicKeyRetrial=true
                     &amp;useUnicode=true&amp;useSSl=false"></property>
        <!--指定登入的帳號密碼-->
        <property name="username" value="root"></property>
        <property name="password" value="root"></property>
        <!--設定連接池參數-->
        <!--資料庫啟動時要初始化幾個資料庫連接在連接池之中-->
        <property name="initialSize" value="5"></property>
        <!--資料庫的連接池中，允許的最大連接數量上限-->
        <property name="maxActive" value="20"></property>
    </bean>

    <!--3.通過IoC容器自動初始化SqlSessionFactory物件-->
    <!--
        使用MyBatis整合包中的SqlSessionFactoryBean
        根據設定的參數創建SqlSessionFactory
        這樣我們就不用自己再創建SqlSessionFactory
        且透過這樣創造出來的SqlSessionFactory物件會自動被IoC管理
    -->
    <!--使用原生的MyBatis與Spring整合，實作類為org.mybatis.spring.SqlSessionFactoryBean-->
    <!--<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
    <!--使用MyBatis-Plus與Spring整合，實作類為com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean-->
    <bean id="sessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <!--設定SqlSessionFactory的參數-->
        <!--指定資料庫來源-->
        <property name="dataSource" ref="dataSource"></property>
        <!--表明SQL語句的配置xml檔案位置:在mappers資料夾下的所有xml檔案-->
        <property name="mapperLocations" value="classpath:mappers/*.xml"></property>
        <!--5.指定MyBatis配置文件的地址-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>

    <!--4.配置Mapper掃描器:用於掃描MyBatis Mapper Interface-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--告訴掃描器用於與資料庫互動的MyBatis Interface的路徑-->
        <property name="basePackage" value="com.imooc.reader.mapper"></property>
    </bean>

    <!--配置聲明式事務配置-->
    <!--使用TransactionManager管理事務-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--啟用聲明式事務的註解開發模式-->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

    <!--配置Kaptcha-->
    <bean id="kaptchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <!--設定圖片是否生成邊框-->
                        <prop key="kaptcha.border">no</prop>
                        <!--圖片寬度-->
                        <prop key="kaptcha.image.width">120</prop>
                        <!--字體顏色-->
                        <prop key="kaptcha.textproducer.font.color">blue</prop>
                        <!--字體大小(最大值)-->
                        <prop key="kaptcha.textproducer.font.size">40</prop>
                        <!--驗證碼中的字元數量-->
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>
</beans>